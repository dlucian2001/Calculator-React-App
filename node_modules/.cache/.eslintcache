[{"C:\\Users\\danci\\OneDrive\\Desktop\\calculator-react-app\\calculator-app\\src\\index.js":"1","C:\\Users\\danci\\OneDrive\\Desktop\\calculator-react-app\\calculator-app\\src\\App.js":"2","C:\\Users\\danci\\OneDrive\\Desktop\\calculator-react-app\\calculator-app\\src\\DigitalButton.js":"3","C:\\Users\\danci\\OneDrive\\Desktop\\calculator-react-app\\calculator-app\\src\\OperationButton.js":"4"},{"size":189,"mtime":1689942940685,"results":"5","hashOfConfig":"6"},{"size":4748,"mtime":1689946401074,"results":"7","hashOfConfig":"6"},{"size":222,"mtime":1689944017699,"results":"8","hashOfConfig":"6"},{"size":245,"mtime":1689944506430,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xnvk9",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\danci\\OneDrive\\Desktop\\calculator-react-app\\calculator-app\\src\\index.js",[],[],"C:\\Users\\danci\\OneDrive\\Desktop\\calculator-react-app\\calculator-app\\src\\App.js",["23","24"],[],"import { useReducer } from \"react\";\nimport DigitButton from \"./DigitalButton\";\nimport OperationButton from \"./OperationButton\";\nimport \"./styles.css\"\n\nexport const ACTIONS = {\n  ADD_DIGIT: 'add-digit',\n  CHOOSE_OPERATION: 'choose-operation',\n  CLEAR: 'clear',\n  DELETE_DIGIT: 'delete-digit',\n  EVALUATE: 'evaluate'\n}\n\nfunction reducer(state, { type, payload }) {\n  switch(type) {\n    case ACTIONS.ADD_DIGIT:\n      if(state.overwrite){\n        return{\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false,\n        }\n      }\n      if(payload.digit === \"0\" && state.currentOperand === \"0\") return state\n  \n      if(payload.digit === \".\" && state.currentOperand.includes(\".\")) return state\n\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`\n      }\n      case ACTIONS.CHOOSE_OPERATION:\n        if(state.currentOperand == null && state.previousOperand == null){\n          return state\n        }\n\n        if(state.currentOperand == null){\n          return{\n            ...state,\n            operation: payload.operation\n          }\n        }\n\n        if(state.previousOperand == null) {\n          return {\n            ...state,\n            operation: payload.operation,\n            previousOperand: state.currentOperand,\n            currentOperand: null,\n          }\n        }\n\n        return {\n          ...state,\n          previousOperand: evaluate(state),\n          operation: payload.operation,\n          currentOperand: null\n        }\n\n      case ACTIONS.CLEAR:\n        return {}\n\n      case ACTIONS.DELETE_DIGIT:\n        if(state.overwrite){\n          return{\n            ...state,\n            overwrite:false,\n            currentOperand: null\n          }\n        }\n        if(state.currentOperand == null) return state\n        if(state.currentOperand.lenght === 1) {\n          return { ...state, currentOperand:null}\n        }\n\n        return {\n          ...state,\n          currentOperand: state.currentOperand.slice(0, -1)\n        }\n\n      case ACTIONS.EVALUATE:\n        if(state.operation == null || state.currentOperand == null || state.previousOperand == null){\n          return state\n        }\n\n        return {\n          ...state,\n          overwrite: true,\n          previousOperand: null,\n          operation: null,\n          currentOperand: evaluate(state),\n        }\n  }\n}\n\nfunction evaluate({currentOperand, previousOperand, operation}){\n   const prev = parseFloat(previousOperand)\n   const current = parseFloat(currentOperand)\n   if(isNaN(prev) || isNaN(current)) return \"\"\n   let computation = \"\"\n   switch (operation) {\n    case \"+\":\n      computation = prev + current\n      break\n    case \"-\":\n      computation = prev - current\n      break\n    case \"*\":\n      computation = prev * current\n      break\n    case \"รท\":\n      computation = prev / current\n      break\n   }\n\n   return computation.toString()\n}\n\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\n  maximumFractionDigits: 0,\n})\n\nfunction formatOperand(operand) {\n  if(operand == null) return\n  const [integer, decimal] = operand.split('.')\n  if(decimal == null) return INTEGER_FORMATTER.format(integer)\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`\n}\n\nfunction App() {\n  const [{currentOperand, previousOperand, operation}, dispatch] = useReducer(reducer, {})\n\n  return (\n    <div className=\"calculator-grid\">\n      <div className=\"output\">\n        <div className=\"previous-operand\">{formatOperand(previousOperand)} {operation}</div>\n        <div className=\"current-operand\">{formatOperand(currentOperand)} </div>\n      </div>\n      <button className=\"span-two\" onClick={() => dispatch({type: ACTIONS.CLEAR})}>AC</button>\n      <button onClick={() => dispatch({type: ACTIONS.DELETE_DIGIT})}>DEL</button>\n      <OperationButton operation={\"รท\"} dispatch={dispatch} />\n      <DigitButton digit=\"1\" dispatch={dispatch} />\n      <DigitButton digit=\"2\" dispatch={dispatch} />\n      <DigitButton digit=\"3\" dispatch={dispatch} />\n      <OperationButton operation={\"*\"} dispatch={dispatch} />\n      <DigitButton digit=\"4\" dispatch={dispatch} />\n      <DigitButton digit=\"5\" dispatch={dispatch} />\n      <DigitButton digit=\"6\" dispatch={dispatch} />\n      <OperationButton operation={\"+\"} dispatch={dispatch} />\n      <DigitButton digit=\"7\" dispatch={dispatch} />\n      <DigitButton digit=\"8\" dispatch={dispatch} />\n      <DigitButton digit=\"9\" dispatch={dispatch} />\n      <OperationButton operation={\"-\"} dispatch={dispatch} />\n      <DigitButton digit=\".\" dispatch={dispatch} />\n      <DigitButton digit=\"0\" dispatch={dispatch} />\n      <button className=\"span-two\" onClick={() => dispatch({type: ACTIONS.EVALUATE})}>=</button>\n\n    </div>\n);\n}\n\nexport default App;\n","C:\\Users\\danci\\OneDrive\\Desktop\\calculator-react-app\\calculator-app\\src\\DigitalButton.js",[],[],"C:\\Users\\danci\\OneDrive\\Desktop\\calculator-react-app\\calculator-app\\src\\OperationButton.js",[],[],{"ruleId":"25","severity":1,"message":"26","line":15,"column":3,"nodeType":"27","messageId":"28","endLine":93,"endColumn":4},{"ruleId":"25","severity":1,"message":"26","line":101,"column":4,"nodeType":"27","messageId":"28","endLine":114,"endColumn":5},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase"]